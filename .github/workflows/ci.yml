name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags:
      - 'v*'  # Trigger on version tags
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  UV_VERSION: '0.8.6'
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE: promptsentinelai/prompt-sentinel

jobs:
  # Fast tests for PRs - quick feedback loop
  test-quick:
    name: Quick Tests (PR)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-quick-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-quick-

      - name: Install dependencies
        run: |
          uv venv --python python${{ env.PYTHON_VERSION }}
          source .venv/bin/activate
          uv pip install -e ".[dev,test]"

      - name: Run comprehensive tests (fast)
        run: |
          source .venv/bin/activate
          pytest tests/*comprehensive*.py -n auto --tb=short
        env:
          REDIS_ENABLED: false
          HEURISTIC_ENABLED: true
          LLM_CLASSIFICATION_ENABLED: false
          PII_DETECTION_ENABLED: true

  # Full test suite with coverage for main branch
  test-full:
    name: Full Test Suite
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        python-version: ['3.11']  # Only test on 3.11 to reduce duplicate runs

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          uv venv --python python${{ matrix.python-version }}
          source .venv/bin/activate
          uv pip install -e ".[dev,test]"

      - name: Run full test suite with parallel execution
        run: |
          source .venv/bin/activate
          pytest tests/ -m "not docker" -n auto --cov=src/prompt_sentinel --cov-report=xml --cov-report=term
        env:
          REDIS_ENABLED: false
          HEURISTIC_ENABLED: true
          LLM_CLASSIFICATION_ENABLED: false
          PII_DETECTION_ENABLED: true

      - name: Run integration tests with Redis
        run: |
          source .venv/bin/activate
          pytest tests/test_cache_manager_comprehensive.py tests/test_integration.py -v
        env:
          REDIS_ENABLED: true
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_PASSWORD: ''
          HEURISTIC_ENABLED: true
          LLM_CLASSIFICATION_ENABLED: false
          PII_DETECTION_ENABLED: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.python-version }}
        continue-on-error: true

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-lint-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-lint-

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Run Black formatter check
        run: |
          source .venv/bin/activate
          black --check src/ tests/

      - name: Run Ruff linter
        run: |
          source .venv/bin/activate
          ruff check src/ tests/

      - name: Run MyPy type checker
        run: |
          source .venv/bin/activate
          mypy src/ --ignore-missing-imports
        continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Run Bandit security scan
        run: |
          source .venv/bin/activate
          bandit -r src/ -ll -f json -o bandit-report.json
        continue-on-error: true

      - name: Run Safety check
        run: |
          source .venv/bin/activate
          safety check --json
        continue-on-error: true

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
        continue-on-error: true

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint]
    # Build Docker images on:
    # - Push to main branch with 'release:' prefix OR
    # - Manual workflow dispatch OR
    # - Tagged releases
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, 'release:')) ||
      github.event_name == 'workflow_dispatch' ||
      startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=sha-

      - name: Determine platforms
        id: platforms
        run: |
          # Build for amd64 only by default (fast builds ~10 minutes)
          # Build for both amd64 and arm64 only for tagged releases
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "platforms=linux/amd64,linux/arm64" >> $GITHUB_OUTPUT
            echo "Building multi-platform image (amd64 + arm64) for release"
          else
            echo "platforms=linux/amd64" >> $GITHUB_OUTPUT
            echo "Building single platform image (amd64 only) for faster builds"
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ steps.platforms.outputs.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  api-test:
    name: API Integration Test
    runs-on: ubuntu-latest
    needs: docker
    # Run API tests when Docker images are built
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, 'release:')) ||
      github.event_name == 'workflow_dispatch' ||
      startsWith(github.ref, 'refs/tags/')

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start PromptSentinel
        run: |
          docker run -d \
            --name prompt-sentinel \
            -p 8080:8080 \
            -e REDIS_ENABLED=true \
            -e REDIS_HOST=host.docker.internal \
            -e REDIS_PORT=6379 \
            -e HEURISTIC_ENABLED=true \
            -e LLM_CLASSIFICATION_ENABLED=false \
            -e PII_DETECTION_ENABLED=true \
            --add-host=host.docker.internal:host-gateway \
            ${{ env.DOCKER_IMAGE }}:latest

      - name: Wait for service to be ready
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:8080/api/v1/health; then
              echo "Service is ready"
              break
            fi
            echo "Waiting for service... ($i/30)"
            sleep 2
          done

      - name: Test health endpoint
        run: |
          curl -f http://localhost:8080/api/v1/health || exit 1

      - name: Test detection endpoint
        run: |
          curl -X POST http://localhost:8080/api/v1/detect \
            -H "Content-Type: application/json" \
            -d '{"prompt": "Hello, this is a test"}' \
            -f || exit 1

      - name: Test analyze endpoint
        run: |
          curl -X POST http://localhost:8080/api/v1/analyze \
            -H "Content-Type: application/json" \
            -d '{"messages": [{"role": "user", "content": "Test message"}]}' \
            -f || exit 1

      - name: Test cache stats endpoint
        run: |
          curl -f http://localhost:8080/api/v1/cache/stats || exit 1

      - name: Show container logs on failure
        if: failure()
        run: docker logs prompt-sentinel

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test-full, lint, security]
    # Docker job will run in parallel with release job, both triggered by 'release:' commit message
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, 'release:')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          VERSION=$(grep "^__version__" src/prompt_sentinel/__init__.py | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            ## PromptSentinel v${{ steps.version.outputs.version }}

            ### Features
            - Multi-layer prompt injection detection
            - PII detection and redaction (15+ types)
            - Redis caching with 98% performance improvement
            - Multi-provider LLM support with failover

            ### Docker Image
            ```bash
            docker pull ${{ env.DOCKER_IMAGE }}:v${{ steps.version.outputs.version }}
            ```

            See [CHANGELOG.md](CHANGELOG.md) for full details.
          draft: false
          prerelease: false
