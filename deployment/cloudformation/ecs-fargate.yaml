AWSTemplateFormatVersion: '2010-09-09'
Description: 'PromptSentinel ECS Fargate Deployment - Placeholder Template'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for deployment

  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private subnet IDs for ECS tasks

  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Public subnet IDs for ALB

  ContainerImage:
    Type: String
    Default: promptsentinel/prompt-sentinel:latest
    Description: Docker image for PromptSentinel

  TaskCpu:
    Type: String
    Default: '512'
    AllowedValues:
      - '256'
      - '512'
      - '1024'
      - '2048'
      - '4096'
    Description: CPU units for ECS task

  TaskMemory:
    Type: String
    Default: '1024'
    Description: Memory for ECS task in MB

  DesiredCount:
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 10
    Description: Desired number of ECS tasks

  MinCapacity:
    Type: Number
    Default: 1
    MinValue: 1
    Description: Minimum number of ECS tasks

  MaxCapacity:
    Type: Number
    Default: 10
    MinValue: 1
    Description: Maximum number of ECS tasks

  AnthropicApiKey:
    Type: String
    NoEcho: true
    Description: Anthropic API key

  OpenAIApiKey:
    Type: String
    NoEcho: true
    Default: ''
    Description: OpenAI API key (optional)

  GeminiApiKey:
    Type: String
    NoEcho: true
    Default: ''
    Description: Google Gemini API key (optional)

  DetectionMode:
    Type: String
    Default: strict
    AllowedValues:
      - strict
      - moderate
      - permissive
    Description: Detection mode

  EnableRedis:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable Redis cache

  AllowedCidrBlocks:
    Type: String
    Default: '0.0.0.0/0'
    Description: CIDR blocks allowed to access ALB

Conditions:
  CreateRedis: !Equals [!Ref EnableRedis, 'true']

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${Environment}-prompt-sentinel-cluster'
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Project
          Value: PromptSentinel
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${Environment}-prompt-sentinel'
      RetentionInDays: 30

  # Secrets Manager for API Keys
  ApiKeysSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${Environment}-prompt-sentinel-api-keys'
      Description: API keys for PromptSentinel
      SecretString: !Sub |
        {
          "ANTHROPIC_API_KEY": "${AnthropicApiKey}",
          "OPENAI_API_KEY": "${OpenAIApiKey}",
          "GEMINI_API_KEY": "${GeminiApiKey}"
        }
      Tags:
        - Key: Project
          Value: PromptSentinel
        - Key: Environment
          Value: !Ref Environment

  # IAM Roles
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-prompt-sentinel-execution'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref ApiKeysSecret
      Tags:
        - Key: Project
          Value: PromptSentinel
        - Key: Environment
          Value: !Ref Environment

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-prompt-sentinel-task'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Tags:
        - Key: Project
          Value: PromptSentinel
        - Key: Environment
          Value: !Ref Environment

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Environment}-prompt-sentinel-alb'
      GroupDescription: Security group for PromptSentinel ALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AllowedCidrBlocks
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref AllowedCidrBlocks
      Tags:
        - Key: Project
          Value: PromptSentinel
        - Key: Environment
          Value: !Ref Environment

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Environment}-prompt-sentinel-ecs'
      GroupDescription: Security group for PromptSentinel ECS tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Project
          Value: PromptSentinel
        - Key: Environment
          Value: !Ref Environment

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${Environment}-prompt-sentinel'
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets: !Ref PublicSubnetIds
      Tags:
        - Key: Project
          Value: PromptSentinel
        - Key: Environment
          Value: !Ref Environment

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${Environment}-prompt-sentinel'
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Tags:
        - Key: Project
          Value: PromptSentinel
        - Key: Environment
          Value: !Ref Environment

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${Environment}-prompt-sentinel'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: prompt-sentinel
          Image: !Ref ContainerImage
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          Environment:
            - Name: API_ENV
              Value: !Ref Environment
            - Name: DETECTION_MODE
              Value: !Ref DetectionMode
            - Name: LOG_LEVEL
              Value: INFO
            - Name: REDIS_ENABLED
              Value: !Ref EnableRedis
            - Name: REDIS_HOST
              Value: !If
                - CreateRedis
                - !GetAtt RedisCluster.RedisEndpoint.Address
                - ''
          Secrets:
            - Name: ANTHROPIC_API_KEY
              ValueFrom: !Sub '${ApiKeysSecret}:ANTHROPIC_API_KEY::'
            - Name: OPENAI_API_KEY
              ValueFrom: !Sub '${ApiKeysSecret}:OPENAI_API_KEY::'
            - Name: GEMINI_API_KEY
              ValueFrom: !Sub '${ApiKeysSecret}:GEMINI_API_KEY::'
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8080/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Tags:
        - Key: Project
          Value: PromptSentinel
        - Key: Environment
          Value: !Ref Environment

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListener
    Properties:
      ServiceName: !Sub '${Environment}-prompt-sentinel'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets: !Ref PrivateSubnetIds
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: prompt-sentinel
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
      Tags:
        - Key: Project
          Value: PromptSentinel
        - Key: Environment
          Value: !Ref Environment

  # Auto Scaling
  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxCapacity
      MinCapacity: !Ref MinCapacity
      ResourceId: !Sub 'service/${ECSCluster}/${ECSService.Name}'
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${Environment}-prompt-sentinel-cpu'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0

  # Optional: ElastiCache Redis
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Condition: CreateRedis
    Properties:
      CacheSubnetGroupName: !Sub '${Environment}-prompt-sentinel'
      Description: Subnet group for PromptSentinel Redis
      SubnetIds: !Ref PrivateSubnetIds
      Tags:
        - Key: Project
          Value: PromptSentinel
        - Key: Environment
          Value: !Ref Environment

  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateRedis
    Properties:
      GroupName: !Sub '${Environment}-prompt-sentinel-redis'
      GroupDescription: Security group for PromptSentinel Redis
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref ECSSecurityGroup
      Tags:
        - Key: Project
          Value: PromptSentinel
        - Key: Environment
          Value: !Ref Environment

  RedisCluster:
    Type: AWS::ElastiCache::CacheCluster
    Condition: CreateRedis
    Properties:
      CacheClusterId: !Sub '${Environment}-prompt-sentinel'
      Engine: redis
      CacheNodeType: cache.t3.micro
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      VpcSecurityGroupIds:
        - !Ref RedisSecurityGroup
      Tags:
        - Key: Project
          Value: PromptSentinel
        - Key: Environment
          Value: !Ref Environment

Outputs:
  ALBDNSName:
    Description: DNS name of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-ALBDNSName'

  ServiceURL:
    Description: URL to access the PromptSentinel service
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-ServiceURL'

  ClusterName:
    Description: Name of the ECS cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-ClusterName'

  ServiceName:
    Description: Name of the ECS service
    Value: !GetAtt ECSService.Name
    Export:
      Name: !Sub '${AWS::StackName}-ServiceName'

  LogGroupName:
    Description: CloudWatch log group name
    Value: !Ref LogGroup
    Export:
      Name: !Sub '${AWS::StackName}-LogGroupName'

  RedisEndpoint:
    Description: Redis endpoint (if enabled)
    Condition: CreateRedis
    Value: !GetAtt RedisCluster.RedisEndpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-RedisEndpoint'
